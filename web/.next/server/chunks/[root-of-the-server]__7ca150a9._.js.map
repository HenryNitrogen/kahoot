{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/lib/auth.ts"],"sourcesContent":["import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key-change-in-production';\n\nexport interface TokenPayload {\n  userId: string;\n  email: string;\n}\n\n// 生成JWT token\nexport function generateToken(payload: TokenPayload): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: '30d' });\n}\n\n// 验证JWT token\nexport function verifyToken(token: string): TokenPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as TokenPayload;\n  } catch (error) {\n    return null;\n  }\n}\n\n// 加密密码\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, 12);\n}\n\n// 验证密码\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  return bcrypt.compare(password, hashedPassword);\n}\n\n// 验证邮箱格式\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// 验证密码强度\nexport function isValidPassword(password: string): { valid: boolean; message?: string } {\n  if (password.length < 6) {\n    return { valid: false, message: '密码长度不能少于6位' };\n  }\n  if (password.length > 128) {\n    return { valid: false, message: '密码长度不能超过128位' };\n  }\n  return { valid: true };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAQtC,SAAS,cAAc,OAAqB;IACjD,OAAO,kJAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAM;AAC1D;AAGO,SAAS,YAAY,KAAa;IACvC,IAAI;QACF,OAAO,kJAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAGO,eAAe,aAAa,QAAgB;IACjD,OAAO,8IAAM,CAAC,IAAI,CAAC,UAAU;AAC/B;AAGO,eAAe,eAAe,QAAgB,EAAE,cAAsB;IAC3E,OAAO,8IAAM,CAAC,OAAO,CAAC,UAAU;AAClC;AAGO,SAAS,aAAa,KAAa;IACxC,MAAM,aAAa;IACnB,OAAO,WAAW,IAAI,CAAC;AACzB;AAGO,SAAS,gBAAgB,QAAgB;IAC9C,IAAI,SAAS,MAAM,GAAG,GAAG;QACvB,OAAO;YAAE,OAAO;YAAO,SAAS;QAAa;IAC/C;IACA,IAAI,SAAS,MAAM,GAAG,KAAK;QACzB,OAAO;YAAE,OAAO;YAAO,SAAS;QAAe;IACjD;IACA,OAAO;QAAE,OAAO;IAAK;AACvB","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/lib/userService.ts"],"sourcesContent":["import { prisma } from '@/lib/prisma';\nimport { hashPassword, verifyPassword } from '@/lib/auth';\n\nexport interface CreateUserData {\n  name: string;\n  email: string;\n  password: string;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport class UserService {\n  // 创建新用户\n  static async createUser(data: CreateUserData) {\n    const { name, email, password } = data;\n\n    // 检查用户是否已存在\n    const existingUser = await prisma.user.findUnique({\n      where: { email }\n    });\n\n    if (existingUser) {\n      throw new Error('该邮箱已被注册');\n    }\n\n    // 加密密码\n    const hashedPassword = await hashPassword(password);\n\n    // 创建用户\n    const user = await prisma.user.create({\n      data: {\n        name,\n        email,\n        password: hashedPassword,\n        subscription: {\n          create: {\n            plan: 'free',\n            status: 'trial'\n          }\n        },\n        usageRecords: {\n          create: {\n            requestsToday: 0,\n            requestsThisMonth: 0,\n            totalRequests: 0\n          }\n        }\n      },\n      include: {\n        subscription: true,\n        usageRecords: true\n      }\n    });\n\n    // 返回用户信息（不包含密码）\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n\n  // 用户登录\n  static async loginUser(credentials: LoginCredentials) {\n    const { email, password } = credentials;\n\n    // 查找用户\n    const user = await prisma.user.findUnique({\n      where: { email },\n      include: {\n        subscription: true,\n        usageRecords: true\n      }\n    });\n\n    if (!user) {\n      throw new Error('邮箱或密码错误');\n    }\n\n    // 验证密码\n    const isPasswordValid = await verifyPassword(password, user.password);\n    if (!isPasswordValid) {\n      throw new Error('邮箱或密码错误');\n    }\n\n    // 返回用户信息（不包含密码）\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n\n  // 根据ID获取用户信息\n  static async getUserById(userId: string) {\n    const user = await prisma.user.findUnique({\n      where: { id: userId },\n      include: {\n        subscription: true,\n        usageRecords: true\n      }\n    });\n\n    if (!user) {\n      throw new Error('用户不存在');\n    }\n\n    // 返回用户信息（不包含密码）\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n\n  // 更新用户信息\n  static async updateUser(userId: string, data: Partial<{ name: string; email: string }>) {\n    const user = await prisma.user.update({\n      where: { id: userId },\n      data,\n      include: {\n        subscription: true,\n        usageRecords: true\n      }\n    });\n\n    const { password: _, ...userWithoutPassword } = user;\n    return userWithoutPassword;\n  }\n\n  // 记录AI请求使用情况\n  static async recordAIRequest(userId: string) {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const thisMonth = new Date();\n    thisMonth.setDate(1);\n    thisMonth.setHours(0, 0, 0, 0);\n\n    // 更新使用记录\n    await prisma.usageRecord.updateMany({\n      where: { userId },\n      data: {\n        requestsToday: { increment: 1 },\n        requestsThisMonth: { increment: 1 },\n        totalRequests: { increment: 1 },\n        lastRequestDate: new Date()\n      }\n    });\n  }\n\n  // 获取用户使用统计\n  static async getUserUsageStats(userId: string) {\n    const usageRecord = await prisma.usageRecord.findFirst({\n      where: { userId },\n      orderBy: { createdAt: 'desc' }\n    });\n\n    return usageRecord || {\n      requestsToday: 0,\n      requestsThisMonth: 0,\n      totalRequests: 0\n    };\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAaO,MAAM;IACX,QAAQ;IACR,aAAa,WAAW,IAAoB,EAAE;QAC5C,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAElC,YAAY;QACZ,MAAM,eAAe,MAAM,yHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;QACP,MAAM,iBAAiB,MAAM,IAAA,6HAAY,EAAC;QAE1C,OAAO;QACP,MAAM,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;gBACV,cAAc;oBACZ,QAAQ;wBACN,MAAM;wBACN,QAAQ;oBACV;gBACF;gBACA,cAAc;oBACZ,QAAQ;wBACN,eAAe;wBACf,mBAAmB;wBACnB,eAAe;oBACjB;gBACF;YACF;YACA,SAAS;gBACP,cAAc;gBACd,cAAc;YAChB;QACF;QAEA,gBAAgB;QAChB,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAChD,OAAO;IACT;IAEA,OAAO;IACP,aAAa,UAAU,WAA6B,EAAE;QACpD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAE5B,OAAO;QACP,MAAM,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;YACf,SAAS;gBACP,cAAc;gBACd,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO;QACP,MAAM,kBAAkB,MAAM,IAAA,+HAAc,EAAC,UAAU,KAAK,QAAQ;QACpE,IAAI,CAAC,iBAAiB;YACpB,MAAM,IAAI,MAAM;QAClB;QAEA,gBAAgB;QAChB,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAChD,OAAO;IACT;IAEA,aAAa;IACb,aAAa,YAAY,MAAc,EAAE;QACvC,MAAM,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI;YAAO;YACpB,SAAS;gBACP,cAAc;gBACd,cAAc;YAChB;QACF;QAEA,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QAEA,gBAAgB;QAChB,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAChD,OAAO;IACT;IAEA,SAAS;IACT,aAAa,WAAW,MAAc,EAAE,IAA8C,EAAE;QACtF,MAAM,OAAO,MAAM,yHAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,OAAO;gBAAE,IAAI;YAAO;YACpB;YACA,SAAS;gBACP,cAAc;gBACd,cAAc;YAChB;QACF;QAEA,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAChD,OAAO;IACT;IAEA,aAAa;IACb,aAAa,gBAAgB,MAAc,EAAE;QAC3C,MAAM,QAAQ,IAAI;QAClB,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG;QAExB,MAAM,YAAY,IAAI;QACtB,UAAU,OAAO,CAAC;QAClB,UAAU,QAAQ,CAAC,GAAG,GAAG,GAAG;QAE5B,SAAS;QACT,MAAM,yHAAM,CAAC,WAAW,CAAC,UAAU,CAAC;YAClC,OAAO;gBAAE;YAAO;YAChB,MAAM;gBACJ,eAAe;oBAAE,WAAW;gBAAE;gBAC9B,mBAAmB;oBAAE,WAAW;gBAAE;gBAClC,eAAe;oBAAE,WAAW;gBAAE;gBAC9B,iBAAiB,IAAI;YACvB;QACF;IACF;IAEA,WAAW;IACX,aAAa,kBAAkB,MAAc,EAAE;QAC7C,MAAM,cAAc,MAAM,yHAAM,CAAC,WAAW,CAAC,SAAS,CAAC;YACrD,OAAO;gBAAE;YAAO;YAChB,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,OAAO,eAAe;YACpB,eAAe;YACf,mBAAmB;YACnB,eAAe;QACjB;IACF;AACF","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { UserService } from '@/lib/userService';\nimport { generateToken, isValidEmail, isValidPassword } from '@/lib/auth';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, email, password } = await request.json();\n\n    // 验证输入\n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { error: '请填写所有必需字段' },\n        { status: 400 }\n      );\n    }\n\n    // 验证邮箱格式\n    if (!isValidEmail(email)) {\n      return NextResponse.json(\n        { error: '请输入有效的邮箱地址' },\n        { status: 400 }\n      );\n    }\n\n    // 验证密码强度\n    const passwordValidation = isValidPassword(password);\n    if (!passwordValidation.valid) {\n      return NextResponse.json(\n        { error: passwordValidation.message },\n        { status: 400 }\n      );\n    }\n\n    // 验证用户名\n    if (name.trim().length < 2) {\n      return NextResponse.json(\n        { error: '用户名长度不能少于2位' },\n        { status: 400 }\n      );\n    }\n\n    // 创建用户\n    const user = await UserService.createUser({\n      name: name.trim(),\n      email: email.toLowerCase().trim(),\n      password\n    });\n\n    // 生成JWT token\n    const token = generateToken({\n      userId: user.id,\n      email: user.email\n    });\n\n    console.log('✅ 用户注册成功:', { userId: user.id, email: user.email });\n\n    return NextResponse.json({\n      message: '注册成功',\n      token,\n      user\n    });\n\n  } catch (error) {\n    console.error('❌ 注册失败:', error);\n    \n    if (error instanceof Error) {\n      return NextResponse.json(\n        { error: error.message },\n        { status: 400 }\n      );\n    }\n\n    return NextResponse.json(\n      { error: '服务器错误，请稍后重试' },\n      { status: 500 }\n    );\n  }\n}\n\n// TODO: 数据库集成示例\n/*\n使用 Prisma 的示例：\n\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// 创建用户\nconst newUser = await prisma.user.create({\n  data: {\n    name,\n    email,\n    password: hashedPassword,\n    subscription: {\n      create: {\n        plan: 'free',\n        status: 'trial'\n      }\n    }\n  },\n  include: {\n    subscription: true\n  }\n});\n\n// 检查用户是否存在\nconst existingUser = await prisma.user.findUnique({\n  where: { email }\n});\n*/\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,OAAO;QACP,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAY,GACrB;gBAAE,QAAQ;YAAI;QAElB;QAEA,SAAS;QACT,IAAI,CAAC,IAAA,6HAAY,EAAC,QAAQ;YACxB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAa,GACtB;gBAAE,QAAQ;YAAI;QAElB;QAEA,SAAS;QACT,MAAM,qBAAqB,IAAA,gIAAe,EAAC;QAC3C,IAAI,CAAC,mBAAmB,KAAK,EAAE;YAC7B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,mBAAmB,OAAO;YAAC,GACpC;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ;QACR,IAAI,KAAK,IAAI,GAAG,MAAM,GAAG,GAAG;YAC1B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAc,GACvB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO;QACP,MAAM,OAAO,MAAM,mIAAW,CAAC,UAAU,CAAC;YACxC,MAAM,KAAK,IAAI;YACf,OAAO,MAAM,WAAW,GAAG,IAAI;YAC/B;QACF;QAEA,cAAc;QACd,MAAM,QAAQ,IAAA,8HAAa,EAAC;YAC1B,QAAQ,KAAK,EAAE;YACf,OAAO,KAAK,KAAK;QACnB;QAEA,QAAQ,GAAG,CAAC,aAAa;YAAE,QAAQ,KAAK,EAAE;YAAE,OAAO,KAAK,KAAK;QAAC;QAE9D,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,WAAW;QAEzB,IAAI,iBAAiB,OAAO;YAC1B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,MAAM,OAAO;YAAC,GACvB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAc,GACvB;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,gBAAgB;CAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA","debugId":null}}]
}