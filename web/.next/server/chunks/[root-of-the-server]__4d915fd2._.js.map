{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\n// TODO: 替换为实际的数据库操作\n// 临时的内存存储，生产环境请使用数据库\n// 这里应该导入与register中相同的users数组，或使用数据库\nlet users: any[] = [];\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key-change-in-production';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n\n    // 验证输入\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: '请输入邮箱和密码' },\n        { status: 400 }\n      );\n    }\n\n    // 查找用户\n    const user = users.find(u => u.email === email);\n    if (!user) {\n      return NextResponse.json(\n        { error: '邮箱或密码错误' },\n        { status: 401 }\n      );\n    }\n\n    // 验证密码\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return NextResponse.json(\n        { error: '邮箱或密码错误' },\n        { status: 401 }\n      );\n    }\n\n    // 生成JWT token\n    const token = jwt.sign(\n      { userId: user.id, email: user.email },\n      JWT_SECRET,\n      { expiresIn: '30d' }\n    );\n\n    // 返回用户信息（不包含密码）\n    const { password: _, ...userResponse } = user;\n\n    return NextResponse.json({\n      message: '登录成功',\n      token,\n      user: userResponse\n    });\n\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json(\n      { error: '服务器错误，请稍后重试' },\n      { status: 500 }\n    );\n  }\n}\n\n// TODO: 数据库集成示例\n/*\n使用 Prisma 的示例：\n\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// 查找用户\nconst user = await prisma.user.findUnique({\n  where: { email },\n  include: {\n    subscription: true,\n    usage: true\n  }\n});\n*/\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,oBAAoB;AACpB,qBAAqB;AACrB,oCAAoC;AACpC,IAAI,QAAe,EAAE;AAErB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,OAAO;QACP,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAW,GACpB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO;QACP,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK;QACzC,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAU,GACnB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO;QACP,MAAM,kBAAkB,MAAM,8IAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QACpE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAU,GACnB;gBAAE,QAAQ;YAAI;QAElB;QAEA,cAAc;QACd,MAAM,QAAQ,kJAAG,CAAC,IAAI,CACpB;YAAE,QAAQ,KAAK,EAAE;YAAE,OAAO,KAAK,KAAK;QAAC,GACrC,YACA;YAAE,WAAW;QAAM;QAGrB,gBAAgB;QAChB,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,cAAc,GAAG;QAEzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAc,GACvB;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,gBAAgB;CAChB;;;;;;;;;;;;;;AAcA","debugId":null}}]
}