{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/app/api/auth/me/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport jwt from 'jsonwebtoken';\n\n// TODO: 替换为实际的数据库操作\n// 临时的内存存储，生产环境请使用数据库\nlet users: any[] = [];\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key-change-in-production';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const authHeader = request.headers.get('authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return NextResponse.json(\n        { error: '未提供授权令牌' },\n        { status: 401 }\n      );\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as { userId: string; email: string };\n      \n      // 查找用户\n      const user = users.find(u => u.id === decoded.userId);\n      if (!user) {\n        return NextResponse.json(\n          { error: '用户不存在' },\n          { status: 404 }\n        );\n      }\n\n      // 更新使用统计（模拟）\n      user.lastLoginAt = new Date().toISOString();\n      \n      // 返回用户信息（不包含密码）\n      const { password: _, ...userResponse } = user;\n\n      return NextResponse.json(userResponse);\n\n    } catch (jwtError) {\n      return NextResponse.json(\n        { error: '无效的授权令牌' },\n        { status: 401 }\n      );\n    }\n\n  } catch (error) {\n    console.error('Auth verification error:', error);\n    return NextResponse.json(\n      { error: '服务器错误，请稍后重试' },\n      { status: 500 }\n    );\n  }\n}\n\n// TODO: 数据库集成示例\n/*\n使用 Prisma 的示例：\n\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// 查找用户并更新最后登录时间\nconst user = await prisma.user.update({\n  where: { id: decoded.userId },\n  data: { lastLoginAt: new Date() },\n  include: {\n    subscription: true,\n    usage: true\n  }\n});\n*/\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,oBAAoB;AACpB,qBAAqB;AACrB,IAAI,QAAe,EAAE;AAErB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAU,GACnB;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,WAAW,SAAS,CAAC,IAAI,0BAA0B;QAEjE,IAAI;YACF,MAAM,UAAU,kJAAG,CAAC,MAAM,CAAC,OAAO;YAElC,OAAO;YACP,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,EAAE,KAAK,QAAQ,MAAM;YACpD,IAAI,CAAC,MAAM;gBACT,OAAO,gJAAY,CAAC,IAAI,CACtB;oBAAE,OAAO;gBAAQ,GACjB;oBAAE,QAAQ;gBAAI;YAElB;YAEA,aAAa;YACb,KAAK,WAAW,GAAG,IAAI,OAAO,WAAW;YAEzC,gBAAgB;YAChB,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,cAAc,GAAG;YAEzC,OAAO,gJAAY,CAAC,IAAI,CAAC;QAE3B,EAAE,OAAO,UAAU;YACjB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAU,GACnB;gBAAE,QAAQ;YAAI;QAElB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAc,GACvB;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,gBAAgB;CAChB;;;;;;;;;;;;;;;AAeA","debugId":null}}]
}