{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/henrynitrogen/hi/projects/kahoot/web/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport bcrypt from 'bcryptjs';\nimport jwt from 'jsonwebtoken';\n\n// TODO: 替换为实际的数据库操作\n// 临时的内存存储，生产环境请使用数据库\nconst users: any[] = [];\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key-change-in-production';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { name, email, password } = await request.json();\n\n    // 验证输入\n    if (!name || !email || !password) {\n      return NextResponse.json(\n        { error: '请填写所有必需字段' },\n        { status: 400 }\n      );\n    }\n\n    if (password.length < 6) {\n      return NextResponse.json(\n        { error: '密码长度不能少于6位' },\n        { status: 400 }\n      );\n    }\n\n    // 检查用户是否已存在\n    const existingUser = users.find(user => user.email === email);\n    if (existingUser) {\n      return NextResponse.json(\n        { error: '该邮箱已被注册' },\n        { status: 400 }\n      );\n    }\n\n    // 加密密码\n    const hashedPassword = await bcrypt.hash(password, 12);\n\n    // 创建用户\n    const newUser = {\n      id: Date.now().toString(),\n      name,\n      email,\n      password: hashedPassword,\n      createdAt: new Date().toISOString(),\n      subscription: {\n        plan: 'free',\n        expiresAt: null,\n        status: 'trial'\n      },\n      usage: {\n        requestsToday: 0,\n        requestsThisMonth: 0,\n        totalRequests: 0\n      }\n    };\n\n    users.push(newUser);\n\n    // 生成JWT token\n    const token = jwt.sign(\n      { userId: newUser.id, email: newUser.email },\n      JWT_SECRET,\n      { expiresIn: '30d' }\n    );\n\n    // 返回用户信息（不包含密码）\n    const { password: _, ...userResponse } = newUser;\n\n    return NextResponse.json({\n      message: '注册成功',\n      token,\n      user: userResponse\n    });\n\n  } catch (error) {\n    console.error('Registration error:', error);\n    return NextResponse.json(\n      { error: '服务器错误，请稍后重试' },\n      { status: 500 }\n    );\n  }\n}\n\n// TODO: 数据库集成示例\n/*\n使用 Prisma 的示例：\n\nimport { PrismaClient } from '@prisma/client';\nconst prisma = new PrismaClient();\n\n// 创建用户\nconst newUser = await prisma.user.create({\n  data: {\n    name,\n    email,\n    password: hashedPassword,\n    subscription: {\n      create: {\n        plan: 'free',\n        status: 'trial'\n      }\n    }\n  },\n  include: {\n    subscription: true\n  }\n});\n\n// 检查用户是否存在\nconst existingUser = await prisma.user.findUnique({\n  where: { email }\n});\n*/\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,oBAAoB;AACpB,qBAAqB;AACrB,MAAM,QAAe,EAAE;AAEvB,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU,IAAI;AAEtC,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEpD,OAAO;QACP,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAY,GACrB;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAa,GACtB;gBAAE,QAAQ;YAAI;QAElB;QAEA,YAAY;QACZ,MAAM,eAAe,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK;QACvD,IAAI,cAAc;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAU,GACnB;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO;QACP,MAAM,iBAAiB,MAAM,8IAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,OAAO;QACP,MAAM,UAAU;YACd,IAAI,KAAK,GAAG,GAAG,QAAQ;YACvB;YACA;YACA,UAAU;YACV,WAAW,IAAI,OAAO,WAAW;YACjC,cAAc;gBACZ,MAAM;gBACN,WAAW;gBACX,QAAQ;YACV;YACA,OAAO;gBACL,eAAe;gBACf,mBAAmB;gBACnB,eAAe;YACjB;QACF;QAEA,MAAM,IAAI,CAAC;QAEX,cAAc;QACd,MAAM,QAAQ,kJAAG,CAAC,IAAI,CACpB;YAAE,QAAQ,QAAQ,EAAE;YAAE,OAAO,QAAQ,KAAK;QAAC,GAC3C,YACA;YAAE,WAAW;QAAM;QAGrB,gBAAgB;QAChB,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,cAAc,GAAG;QAEzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;YACA,MAAM;QACR;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAc,GACvB;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,gBAAgB;CAChB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA","debugId":null}}]
}